name: deploy-porttrack

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    permissions:
      id-token: write
      contents: read

    concurrency:
      group: deploy-porttrack
      cancel-in-progress: true

    strategy:
      matrix:
        env: [dev, stgtest, prod]

    environment: ${{ matrix.env }}
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      APP_NAME: porttrack-app
      S3_BUCKET: porttrack-artifacts
      KEY_PREFIX: ${{ matrix.env }}
      ZIP_NAME: artifact-${{ github.sha }}.zip
      SHA_NAME: artifact-${{ github.sha }}.sha256

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install deps & (skip) tests
        working-directory: app
        run: |
          npm install
          echo "No tests, skipping"

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::885812046449:role/ga-deploy-role
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: gha-${{ github.run_id }}

      # ---- Slack: INICIO ----
      - name: Slack | Inicio deploy
        if: always()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          SHORT_SHA=${GITHUB_SHA::7}
          read -r -d '' payload <<EOF
          {
            "text": ":rocket: *Inicio deploy* \`${{ matrix.env }}\` por *${GITHUB_ACTOR}*",
            "attachments": [
              {
                "color": "#439FE0",
                "fields": [
                  {"title":"Repo","value":"${GITHUB_REPOSITORY}","short":true},
                  {"title":"Commit","value":"${SHORT_SHA}","short":true}
                ]
              }
            ]
          }
          EOF
          curl -s -X POST -H 'Content-type: application/json' --data "$payload" "$SLACK_WEBHOOK_URL" >/dev/null
      # ---- Slack: INICIO ----

      - name: Ensure scripts are executable
        run: chmod +x scripts/*.sh || true

      - name: Package artifact
        run: |
          zip -r "${ZIP_NAME}" . \
            -x ".git/*" ".github/*" "app/node_modules/*" \
               "**/*.env" "**/*.pem" "**/*.key" "**/id_rsa" "**/id_ed25519"
          shasum -a 256 "${ZIP_NAME}" > "${SHA_NAME}"

      - name: Upload artifact to S3 (SSE-S3)
        run: |
          aws s3 cp "${ZIP_NAME}" "s3://${S3_BUCKET}/${KEY_PREFIX}/${ZIP_NAME}" --sse AES256
          aws s3 cp "${SHA_NAME}" "s3://${S3_BUCKET}/${KEY_PREFIX}/${SHA_NAME}" --sse AES256

      - name: Register App Revision
        run: |
          aws deploy register-application-revision \
            --application-name "${APP_NAME}" \
            --s3-location bucket="${S3_BUCKET}",key="${KEY_PREFIX}/${ZIP_NAME}",bundleType=zip

      - id: create_deploy
        name: Create Deployment (Rolling / In-place)
        run: |
          DEPLOY_ID=$(aws deploy create-deployment \
            --application-name "${APP_NAME}" \
            --deployment-group-name "dg-${{ matrix.env }}" \
            --revision "revisionType=S3,s3Location={bucket=${S3_BUCKET},key=${KEY_PREFIX}/${ZIP_NAME},bundleType=zip}" \
            --query deploymentId --output text)
          echo "DEPLOY_ID=$DEPLOY_ID" >> $GITHUB_OUTPUT
          echo "DEPLOY_URL=https://${AWS_REGION}.console.aws.amazon.com/codesuite/codedeploy/deployments/${DEPLOY_ID}?region=${AWS_REGION}" >> $GITHUB_OUTPUT

      # ---- Slack: DEPLOYMENT CREADO ----
      - name: Slack | Deployment creado
        if: success()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          SHORT_SHA=${GITHUB_SHA::7}
          DEPLOY_URL="${{ steps.create_deploy.outputs.DEPLOY_URL }}"
          read -r -d '' payload <<EOF
          {
            "text": ":package: *Deployment creado* \`${{ matrix.env }}\`",
            "attachments": [
              {
                "color":"#439FE0",
                "fields":[
                  {"title":"Deployment","value":"<${DEPLOY_URL}|Ver en CodeDeploy>","short":true},
                  {"title":"Commit","value":"${SHORT_SHA}","short":true}
                ]
              }
            ]
          }
          EOF
          curl -s -X POST -H 'Content-type: application/json' --data "$payload" "$SLACK_WEBHOOK_URL" >/dev/null
      # ---- Slack: DEPLOYMENT CREADO ----

      # (A partir de aquí CodeDeploy se encarga del rolling / validación)

      # ---- Slack: ÉXITO ----
      - name: Slack | Éxito
        if: success()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          SHORT_SHA=${GITHUB_SHA::7}
          read -r -d '' payload <<EOF
          {
            "text": ":white_check_mark: *Deploy OK* \`${{ matrix.env }}\` (commit ${SHORT_SHA})"
          }
          EOF
          curl -s -X POST -H 'Content-type: application/json' --data "$payload" "$SLACK_WEBHOOK_URL" >/dev/null
      # ---- Slack: ÉXITO ----

      # ---- Slack: ERROR ----
      - name: Slack | Error
        if: failure()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          SHORT_SHA=${GITHUB_SHA::7}
          JOB_URL="https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          read -r -d '' payload <<EOF
          {
            "text": ":x: *Deploy FALLÓ* \`${{ matrix.env }}\` (commit ${SHORT_SHA})",
            "attachments":[
              {"color":"#E01E5A","text":"<${JOB_URL}|Ver logs del workflow>"}
            ]
          }
          EOF
          curl -s -X POST -H 'Content-type: application/json' --data "$payload" "$SLACK_WEBHOOK_URL" >/dev/null
      # ---- Slack: ERROR ----
