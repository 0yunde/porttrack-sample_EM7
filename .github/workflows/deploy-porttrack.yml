name: deploy-porttrack

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    permissions:
      id-token: write
      contents: read

    concurrency:
      group: deploy-porttrack
      cancel-in-progress: true

    strategy:
      matrix:
        env: [dev]   # si quieres probar solo dev, deja [dev]

    environment: ${{ matrix.env }}
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      APP_NAME: porttrack-app
      S3_BUCKET: porttrack-artifacts
      KEY_PREFIX: ${{ matrix.env }}
      ZIP_NAME: artifact-${{ github.sha }}.zip
      SHA_NAME: artifact-${{ github.sha }}.sha256
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}

    steps:
      - uses: actions/checkout@v4

      # --- Slack: anuncio de inicio ---
      - name: Notify Slack (start)
        if: ${{ env.SLACK_WEBHOOK != '' }}
        run: |
          MSG="🚀 Inicio deploy *${{ matrix.env }}* por ${GITHUB_ACTOR} (commit ${{ github.sha }})"
          curl -s -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"$MSG\"}" "$SLACK_WEBHOOK" >/dev/null

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install deps & (skip) tests
        working-directory: app
        run: |
          npm install
          echo "No tests, skipping"

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::885812046449:role/ga-deploy-role
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: gha-${{ github.run_id }}

      - name: Ensure scripts are executable
        run: chmod +x scripts/*.sh || true

      - name: Package artifact
        run: |
          zip -r "${ZIP_NAME}" . \
            -x ".git/*" ".github/*" "app/node_modules/*" \
               "**/*.env" "**/*.pem" "**/*.key" "**/id_rsa" "**/id_ed25519"
          shasum -a 256 "${ZIP_NAME}" > "${SHA_NAME}"

      - name: Upload artifact to S3 (SSE-S3)
        run: |
          aws s3 cp "${ZIP_NAME}" "s3://${S3_BUCKET}/${KEY_PREFIX}/${ZIP_NAME}" --sse AES256
          aws s3 cp "${SHA_NAME}" "s3://${S3_BUCKET}/${KEY_PREFIX}/${SHA_NAME}" --sse AES256

      - name: Register App Revision
        run: |
          aws deploy register-application-revision \
            --application-name "${APP_NAME}" \
            --s3-location bucket="${S3_BUCKET}",key="${KEY_PREFIX}/${ZIP_NAME}",bundleType=zip

      - name: Create Deployment (Rolling / In-place)
        run: |
          aws deploy create-deployment \
            --application-name "${APP_NAME}" \
            --deployment-group-name "dg-${{ matrix.env }}" \
            --revision "revisionType=S3,s3Location={bucket=${S3_BUCKET},key=${KEY_PREFIX}/${ZIP_NAME},bundleType=zip}"

      # --- Slack: éxito / fallo ---
      - name: Notify Slack (success)
        if: success() && env.SLACK_WEBHOOK != ''
        run: |
          MSG="✅ Deploy *${{ matrix.env }}* OK (commit ${{ github.sha }})"
          curl -s -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"$MSG\"}" "$SLACK_WEBHOOK" >/dev/null

      - name: Notify Slack (failure)
        if: failure() && env.SLACK_WEBHOOK != ''
        run: |
          RUN_URL="https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          MSG="❌ Deploy *${{ matrix.env }}* FALLÓ. Revisión: ${RUN_URL}"
          curl -s -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"$MSG\"}" "$SLACK_WEBHOOK" >/dev/null
